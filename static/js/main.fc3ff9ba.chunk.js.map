{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","App","props","state","markdown","handleChange","bind","event","this","setState","target","value","console","log","className","id","onChange","text","dangerouslySetInnerHTML","__html","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+PAIMA,G,MAASC,EAAQ,KAiHRC,E,kDAjDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACbC,SA7Dc,8mBAgEd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANH,E,yDAUNC,GACZC,KAAKC,SAAS,CACdL,SAAUG,EAAMG,OAAOC,U,+BAOf,IAEJP,EAAYI,KAAKL,MAAjBC,SAGL,OADFQ,QAAQC,IAAIT,GAGR,yBAAKU,UAAU,OAGnB,6BACQ,wBAAIA,UAAU,QAAd,UACC,8BAAWC,GAAK,SAASJ,MAAQP,EAAWY,SAAUR,KAAKH,cAC7D,qCACKG,KAAKL,MAAMc,OAIvB,wBAAIF,GAAG,QAAP,YAEA,yBAAKD,UAAU,MAAMC,GAAK,UAAUG,wBAAyB,CAACC,OAAQpB,EAAOK,W,GAxC3DgB,IAAMC,WCvDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.fc3ff9ba.chunk.js","sourcesContent":["import React, {Component}  from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\nconst marked = require('marked'); \n\n\n\n\n\nconst initialState = `\n<h1>Welcome to my React Markdown Previewer!</h1>\n<hr>\n\n<h2>This is a sub-heading...</h2>\n\nthis is paragraph\n\n**This is bolded text**\n\n# Heading\n\n## Heading 2\n\n<hr>\n\n\n> Block Quotes!\n\n<p><b>visit my portfolio <b></p>\n\n\n\n [visit my portfolio](https://codepen.io/kakha-gujejiani/full/rNxyBma)\n\n\n\n\n\n- list item 1\n- list item 2\n- list item 3\n\nthis is a inline  \\`<div></div>\\`\n\nthis is a block of code\n\n\\`\\`\\`\nlet x = 1\nlet y = 2\nlet z = x + y;\n\\`\\`\\`\n\n<img src=\"https://i.ibb.co/pQsCBPN/React.webp\" alt=\"React\" border=\"0\" width=100px>\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n\n`;\n\n\n\n\n\n\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    markdown: initialState\n\n    };\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n\n  handleChange(event){\n   this.setState({\n   markdown: event.target.value\n   });\n\n  }\n\n\n\n  render(){\n\nconst {markdown} = this.state\n\nconsole.log(markdown)\n  return (\n\n    <div className=\"App\">\n\n\n<div>\n        <h5 className=\"name\" >Editor</h5>\n         <textarea  id = 'editor' value ={markdown}  onChange={this.handleChange}  >\n      {<h1>Hello</h1>}\n           {this.state.text}\n           </textarea>\n</div>  \n\n<h6 id='mark' >Markdown</h6>\n\n<div className=\"box\" id = 'preview' dangerouslySetInnerHTML={{__html: marked(markdown)}}>\n  \n{/* <p >{this.state.text}</p> */}\n  </div>\n\n    </div>\n  );\n}\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}